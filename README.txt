קבצי הדאטא שעבדתי עליהם:
train_4.csv 
test_4.csv
train_10.csv 
test_10.csv

קובץ dataset_preparation.py:
 מכין הדאטא, טעינת קבצי ה- csv של dataset_4 ו- dataset_10 חלוקת הדוגמאות כפי שנתבקש ושמירתם בקבצים למעלה.
כלומר בהרצתו מתקבלים הקבצים מלמעלה שעבדתי עליהם, וצריך לספק אותם בהרצות כדי לקבל התוצאות בנוסף שמרתי הדאטא 
בצורת numby array במשתני עזר כדי שיהיה קל לעבוד איתם.

קובץ decision_tree.py:
פונקציה ראשית (1) : decision_tree_build מקבלת דאטא בצורת numby array ובונה עץ החלטה ומחזירה אותו.
פונקציה ראשית (2) : predict מקבלת דוגמא ועץ החלטה, מסווגת אותה בעזרתו ומחזירה הסיווג.
אלה שתי הפונקציות העיקריות שהשתמשתי בהן מחוץ קובץ זה במשימה.

קובץ k_decision_tree.py:
פונקציה ראשית (1) : n_decision_tree מקבלת דאטא בצורת numby array ופרמטרים N, K, P כפי שתואר בתרגיל 
ולומדת מ N עצי החלטה (ומגרילה לכל עץ P*200 דוגמאות) מחשבת לכל עץ המדד centoid ומחזירה אותם.
פונקציה ראשית (2) : k_decistion_tree מקבלת דוגמא ו-N עצי החלטה ופרמטר K ומחזירה סיווג הדוגמא לפי K עצי החלטה 
הקרובים לפי המדד שעשינו.
אלה שתי הפונקציות העיקריות שהשתמשתי בהן מחוץ קובץ זה במשימה.

קובץ param.py:
פונקציה ראשית (1) : test_cls מקבלת סט מבחן של דוגמאות בצורת numby array ו- N עצי החלטה ופרמטר K מסווגת כל
דוגמא בסט האימון בעזרת פונקציה k_decistion_tree  שתוארה למעלה, אחרי סיווג כל דוגמאות המבחן, מחשב הדיוק על ידי 
השוואה לסיווג האמיתי שלהם ומחזיר אותו.
פונקציה ראשית (2) : experiments מריצה הנסיונות מחלק 2 עבור כל מיני פרמטרים עבור שני ה- dataset שלי ומדווחת גרפים 
על התוצאות.
שחזור התוצאות ניתן ע"י הרצת קובץ זה ולראות את התוצאות מיד. (הוא קורה לפונקציה experiments).

קובץ exp.py:
פנקציה ראשית (1) : div_train מחלקת הדאטא ל-5 חלקים וכל פעם לומדת על קבוצה נוספת של דאטא ומסווגת סט המבחן מחדש ומחשבת
הדיוק, ומדווחת על התוצאות, זה נעשה לשתי הדאטא סט שלי.
שחזור התוצאות ניתן ע"י הרצת קובץ זה ולראות את התוצאות מיד. (הוא קורה לפונקציה div_train).